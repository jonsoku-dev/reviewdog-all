# 액션 메타데이터
name: "Unified Lint Action"
description: "통합 린트 액션 (ESLint with Prettier, Stylelint, Markdownlint, Misspell)"
author: "Jonsoku"

# 버전 관리 주석 (수정하지 마세요!)
# ESLint 액션 버전: 2fee6dd72a5419ff4113f694e2068d2a03bb35dd
# Stylelint 액션 버전: dd2b435cc6a7c82705307a9dee740c9bbaa10411
# Markdownlint 액션 버전: 3667398db9118d7e78f7a63d10e26ce454ba5f58
# Misspell 액션 버전: 9daa94af4357dddb6fd3775de806bc0a8e98d3e4

inputs:
  workdir:
    description: "작업 디렉토리 경로"
    required: false
    default: "."

  github_token:
    description: "GitHub Token"
    required: true
    default: ${{ github.token }}

  reporter:
    description: "reviewdog 리포터 [github-pr-check,github-check,github-pr-review]"
    required: false
    default: "github-pr-review"

  filter_mode:
    description: "reviewdog 필터 모드 [added,diff_context,file,nofilter]"
    required: false
    default: "added"

  level:
    description: "리포트 레벨 [info,warning,error]"
    required: false
    default: "info"

  fail_level:
    description: "실패 레벨 [none,any,info,warning,error]"
    required: false
    default: "warning"

  # 린트 도구 활성화/비활성화
  skip_eslint:
    description: "ESLint (with Prettier) 스킵"
    required: false
    default: "false"

  skip_stylelint:
    description: "Stylelint 스킵"
    required: false
    default: "false"

  skip_markdownlint:
    description: "Markdownlint 스킵"
    required: false
    default: "false"

  skip_misspell:
    description: "Misspell 스킵"
    required: false
    default: "false"

  # ESLint 설정
  eslint_flags:
    description: "ESLint 검사 패턴 (Prettier 포함)"
    required: false
    default: "**/*.{js,jsx,ts,tsx}"

  eslint_config_path:
    description: "ESLint 설정 파일 경로"
    required: false
    default: ""

  # Stylelint 설정
  stylelint_input:
    description: "Stylelint 검사 패턴"
    required: false
    default: "**/*.css"

  stylelint_config_path:
    description: "Stylelint 설정 파일 경로"
    required: false
    default: ""

  # Markdownlint 설정
  markdownlint_flags:
    description: "Markdownlint 검사 패턴"
    required: false
    default: "**/*.md"

  markdownlint_config_path:
    description: "Markdownlint 설정 파일 경로"
    required: false
    default: ""

  # Misspell 설정
  misspell_locale:
    description: "Misspell 로케일 (US/UK)"
    required: false
    default: "US"

  misspell_ignore:
    description: "Misspell 무시할 단어 목록 (콤마로 구분)"
    required: false
    default: ""

  # 디버그 모드
  debug_mode:
    description: "디버그 모드 활성화"
    required: false
    default: "false"

  # 통지 설정
  notification_type:
    description: "통지 유형 [none,slack,email,both]"
    required: false
    default: "none"
  
  # Slack 설정
  slack_webhook_url:
    description: "Slack Webhook URL (Enterprise 버전: slack://your-enterprise-url)"
    required: false
  
  slack_channel:
    description: "Slack 채널명 (#으로 시작)"
    required: false
  
  slack_username:
    description: "Slack 봇 사용자명"
    required: false
    default: "Lint Action Bot"
    
  slack_icon_emoji:
    description: "Slack 봇 아이콘 이모지"
    required: false
    default: ":lint:"
  
  # 이메일 설정
  email_server_type:
    description: "이메일 서버 유형 [smtp,enterprise]"
    required: false
    default: "smtp"
    
  email_host:
    description: "SMTP 서버 호스트 또는 Enterprise 메일 API 엔드포인트"
    required: false
  
  email_port:
    description: "SMTP 서버 포트"
    required: false
    default: "587"
    
  email_username:
    description: "이메일 계정 사용자명"
    required: false
  
  email_password:
    description: "이메일 계정 비밀번호 또는 API 키"
    required: false
  
  email_from:
    description: "발신자 이메일 주소"
    required: false
  
  email_to:
    description: "수신자 이메일 주소 (콤마로 구분)"
    required: false

runs:
  using: "composite"
  steps:
    # 1. 환경 설정
    - name: Setup environment
      shell: bash
      working-directory: ${{ inputs.workdir }}
      run: |
        echo "REVIEWDOG_GITHUB_API_TOKEN=${{ inputs.github_token }}" >> $GITHUB_ENV
        if [ "${{ inputs.debug_mode }}" == "true" ]; then
          echo "Debug mode enabled"
          set -x
        fi

    # 2. reviewdog 설치
    - name: Setup reviewdog
      uses: reviewdog/action-setup@v1
      with:
        reviewdog_version: latest

    # 3. Node.js 설정
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    # 4. 작업 공간 설정 및 패키지 설치
    - name: Setup workspace
      shell: bash
      working-directory: ${{ inputs.workdir }}
      run: |
        node ${{ github.action_path }}/setup-workspace.js

    # 5. 설정 파일 생성
    - name: Setup configurations
      shell: bash
      working-directory: ${{ inputs.workdir }}
      run: |
        node ${{ github.action_path }}/setup-configs.js

    # 6. ESLint (with Prettier) 실행
    - name: Run ESLint with Prettier
      id: eslint
      if: inputs.skip_eslint != 'true'
      uses: reviewdog/action-eslint@2fee6dd72a5419ff4113f694e2068d2a03bb35dd
      continue-on-error: true
      with:
        github_token: ${{ inputs.github_token }}
        reporter: ${{ inputs.reporter }}
        filter_mode: ${{ inputs.filter_mode }}
        level: ${{ inputs.level }}
        fail_level: ${{ inputs.fail_level }}
        eslint_flags: ${{ inputs.eslint_flags }}
        workdir: ${{ inputs.workdir }}

    - name: Record ESLint Result
      if: inputs.skip_eslint != 'true'
      shell: bash
      run: |
        echo "ESLINT_OUTCOME=${{ steps.eslint.outcome }}" >> $GITHUB_ENV
        if [ "${{ steps.eslint.outcome }}" != "success" ]; then
          echo "ESLINT_FAILED=true" >> $GITHUB_ENV
        fi

    # 7. Stylelint 실행
    - name: Run Stylelint
      id: stylelint
      if: inputs.skip_stylelint != 'true'
      uses: reviewdog/action-stylelint@dd2b435cc6a7c82705307a9dee740c9bbaa10411
      continue-on-error: true
      with:
        github_token: ${{ inputs.github_token }}
        reporter: ${{ inputs.reporter }}
        filter_mode: ${{ inputs.filter_mode }}
        level: ${{ inputs.level }}
        fail_level: ${{ inputs.fail_level }}
        stylelint_input: ${{ inputs.stylelint_input }}
        packages: 'stylelint-config-standard'
        workdir: ${{ inputs.workdir }}

    - name: Record Stylelint Result
      if: inputs.skip_stylelint != 'true'
      shell: bash
      run: |
        echo "STYLELINT_OUTCOME=${{ steps.stylelint.outcome }}" >> $GITHUB_ENV
        if [ "${{ steps.stylelint.outcome }}" != "success" ]; then
          echo "STYLELINT_FAILED=true" >> $GITHUB_ENV
        fi

    # 8. Markdownlint 실행
    - name: Run Markdownlint
      id: markdownlint
      if: inputs.skip_markdownlint != 'true'
      uses: reviewdog/action-markdownlint@3667398db9118d7e78f7a63d10e26ce454ba5f58
      continue-on-error: true
      with:
        github_token: ${{ inputs.github_token }}
        reporter: ${{ inputs.reporter }}
        filter_mode: ${{ inputs.filter_mode }}
        level: ${{ inputs.level }}
        fail_level: ${{ inputs.fail_level }}
        markdownlint_flags: ${{ inputs.markdownlint_flags }}

    - name: Record Markdownlint Result
      if: inputs.skip_markdownlint != 'true'
      shell: bash
      run: |
        echo "MARKDOWNLINT_OUTCOME=${{ steps.markdownlint.outcome }}" >> $GITHUB_ENV
        if [ "${{ steps.markdownlint.outcome }}" != "success" ]; then
          echo "MARKDOWNLINT_FAILED=true" >> $GITHUB_ENV
        fi

    # 9. Misspell 실행
    - name: Run Misspell
      id: misspell
      if: inputs.skip_misspell != 'true'
      uses: reviewdog/action-misspell@9daa94af4357dddb6fd3775de806bc0a8e98d3e4
      continue-on-error: true
      with:
        github_token: ${{ inputs.github_token }}
        reporter: ${{ inputs.reporter }}
        filter_mode: ${{ inputs.filter_mode }}
        level: ${{ inputs.level }}
        fail_level: ${{ inputs.fail_level }}
        locale: ${{ inputs.misspell_locale }}
        ignore: ${{ inputs.misspell_ignore }}
        pattern: "**/*"
        path: ${{ inputs.workdir }}

    - name: Record Misspell Result
      if: inputs.skip_misspell != 'true'
      shell: bash
      run: |
        echo "MISSPELL_OUTCOME=${{ steps.misspell.outcome }}" >> $GITHUB_ENV
        if [ "${{ steps.misspell.outcome }}" != "success" ]; then
          echo "MISSPELL_FAILED=true" >> $GITHUB_ENV
        fi

    # 10. 결과 수집
    - name: Collect Results
      shell: bash
      env:
        SKIP_ESLINT: ${{ inputs.skip_eslint }}
        SKIP_STYLELINT: ${{ inputs.skip_stylelint }}
        SKIP_MARKDOWNLINT: ${{ inputs.skip_markdownlint }}
        SKIP_MISSPELL: ${{ inputs.skip_misspell }}
        ESLINT_FLAGS: ${{ inputs.eslint_flags }}
        STYLELINT_INPUT: ${{ inputs.stylelint_input }}
        MARKDOWNLINT_FLAGS: ${{ inputs.markdownlint_flags }}
      run: |
        node ${{ github.action_path }}/collect-results.js
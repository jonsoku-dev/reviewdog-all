# 액션 메타데이터
name: "Code Review Action"
description: "AI 코드 리뷰와 접근성 검사를 수행하는 GitHub 액션"
author: "Jonsoku"

# 버전 관리 주석 (수정하지 마세요!)
# ESLint 액션 버전: 2fee6dd72a5419ff4113f694e2068d2a03bb35dd
# Stylelint 액션 버전: dd2b435cc6a7c82705307a9dee740c9bbaa10411
# Markdownlint 액션 버전: 3667398db9118d7e78f7a63d10e26ce454ba5f58
# Misspell 액션 버전: 9daa94af4357dddb6fd3775de806bc0a8e98d3e4

inputs:
  workdir:
    description: "작업 디렉토리 경로"
    required: false
    default: "."

  github_token:
    description: "GitHub Token"
    required: true
    default: ${{ github.token }}

  # AI 리뷰어 설정
  ai_reviewer:
    description: "AI 리뷰어 설정 (JSON 형식)"
    required: false
    default: |
      {
        "enabled": true,
        "apiKey": "",
        "model": "gpt-4",
        "maxTokens": 1000,
        "temperature": 0.7,
        "filePatterns": ["**/*.{js,jsx,ts,tsx}"],
        "excludePatterns": ["**/node_modules/**", "**/dist/**"]
      }

  # Axe 리뷰어 설정
  axe_reviewer:
    description: "Axe 접근성 리뷰어 설정 (JSON 형식)"
    required: false
    default: |
      {
        "enabled": false,
        "filePatterns": ["**/*.{html,jsx,tsx}"],
        "excludePatterns": ["**/node_modules/**", "**/dist/**"],
        "standard": "WCAG2AA"
      }

  # 결과 처리 설정
  fail_on_error:
    description: "에러 발생 시 액션 실패 여부"
    required: false
    default: "true"

  comment_mode:
    description: "코멘트 모드 [pr_comment, inline, both]"
    required: false
    default: "both"

runs:
  using: "composite"
  steps:
    # 1. 환경 설정
    - name: Setup environment
      shell: bash
      run: |
        # 기본 설정
        echo "GITHUB_TOKEN=${{ inputs.github_token }}" >> $GITHUB_ENV
        echo "FAIL_ON_ERROR=${{ inputs.fail_on_error }}" >> $GITHUB_ENV
        echo "COMMENT_MODE=${{ inputs.comment_mode }}" >> $GITHUB_ENV
        echo "GITHUB_WORKSPACE=${{ inputs.workdir }}" >> $GITHUB_ENV

        # 리뷰어 설정
        echo "AI_REVIEWER_CONFIG='${{ inputs.ai_reviewer }}'" >> $GITHUB_ENV
        echo "AXE_REVIEWER_CONFIG='${{ inputs.axe_reviewer }}'" >> $GITHUB_ENV

        # 활성화된 리뷰어 자동 설정
        ENABLED_REVIEWERS=""
        
        # AI 리뷰어 설정 확인
        AI_ENABLED=$(echo '${{ inputs.ai_reviewer }}' | jq -r '.enabled')
        if [ "$AI_ENABLED" = "true" ]; then
          ENABLED_REVIEWERS="ai"
        fi
        
        # Axe 리뷰어 설정 확인
        AXE_ENABLED=$(echo '${{ inputs.axe_reviewer }}' | jq -r '.enabled')
        if [ "$AXE_ENABLED" = "true" ]; then
          if [ -n "$ENABLED_REVIEWERS" ]; then
            ENABLED_REVIEWERS="$ENABLED_REVIEWERS,axe"
          else
            ENABLED_REVIEWERS="axe"
          fi
        fi
        
        echo "ENABLED_REVIEWERS=$ENABLED_REVIEWERS" >> $GITHUB_ENV

    # 2. Node.js 설정
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    # 3. 작업 공간 설정 및 패키지 설치
    - name: Setup workspace
      shell: bash
      working-directory: ${{ inputs.workdir }}
      run: |
        npm install

    # 4. 리뷰어 실행
    - name: Run reviewers
      shell: bash
      working-directory: ${{ inputs.workdir }}
      run: |
        cp ${{ github.action_path }}/src/run-reviews.ts ${{ github.action_path }}/${{ inputs.workdir }}/run-reviews.ts
        npx ts-node ${{ github.action_path }}/${{ inputs.workdir }}/run-reviews.ts

    # 5. 리뷰 결과 보고
    - name: Report results
      shell: bash
      working-directory: ${{ inputs.workdir }}
      run: |
        cp ${{ github.action_path }}/src/report-results.ts ${{ github.action_path }}/${{ inputs.workdir }}/report-results.ts
        npx ts-node ${{ github.action_path }}/${{ inputs.workdir }}/report-results.ts